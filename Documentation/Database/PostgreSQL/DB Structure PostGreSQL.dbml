// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project project_name {
  database_type: 'PostgreSQL'
  Note: 'HushÃ¥llet'
}

Table household {
  id serial [primary key]
  name varchar(255) [not null, unique, note: "Unique name for the household"]
  code varchar(4) [not null, unique, note: "Unique code for the household "] // so we can have 0000-ZZZZ. Consider indexing to speed up queries
}

Table chore {
  id serial [primary key]
  name varchar(255) [not null, unique]
  household_id integer [ref: > household.id, note: "Many-to-One: Each chore belongs to one household"]
  description varchar(255) [not null]
  is_active bool [default: true]
  frequency integer [not null, note: "Frequency of the chore in days (e.g. every 7 days)"]
  is_archived bool [not null, default: false]
  voice_recording bytea [note: "Binary data to store the actual file"]
  image bytea [note: "Binary data to store the actual file"]
  weight integer [not null, note: "Weight of the chore. Constraint: weight should be one of 1, 2, 4, 6, 8"]
}

Table user {
  id serial [primary key]
  user_name varchar(255) [not null]
  hashed_password varchar(255) [not null]
}

Table avatar {
  id serial [primary key]
  name varchar(255) [not null]
  image bytea [not null, note: "Binary data to store the actual file"]
  colour_code varchar(7) [not null, note: "Represents colour codes like #FF5733"]
}


Table chore_to_user {
  user_id integer [not null, ref: > user.id, note: "Many-to-Many: Links to User table (user assigned to a chore)"]
  chore_id integer [not null, ref: > chore.id, note: "Many-to-Many: Links to Chore table (tracks which chore). Cascade delete on chore_id when chore is deleted to maintain referential integrity"]
  is_completed bool [not null, default: false, note: "Indicates if the chore is completed"] 
  due_date datetime [note: "The date the chore is due"]
  done_date datetime [note: "The date the chore was completed"]
}

Table user_to_household {
  nickname varchar(255) [not null]
  household_id integer [not null, ref: > household.id, note: "Many-to-Many: Links a household to users that belong to it"]
  avatar_id integer [not null, ref: > avatar.id, note: "Many-to-Many: Links an avatar to users"]
  user_id integer [not null, ref: > user.id, note: "Many-to-Many: Links a user to a household they belong to"]
  is_active bool [default: true]
  is_admin bool [default: false]
}
