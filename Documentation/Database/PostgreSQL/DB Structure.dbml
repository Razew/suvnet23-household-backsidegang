// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project project_name {
  database_type: 'PostgreSQL'
  Note: 'HushÃ¥llet'
}

Table household {
  id serial [primary key]
  name varchar(255) [not null, unique, note: "Unique name for the household"]
  code integer [not null, unique, note: "Unique code for the household"]
  // code varchar(4) [not null, unique, note: "Unique code for the household "] // so we can have 0000-9999. Consider indexing to speed up queries
}

Table chore {
  id serial [primary key]
  name varchar(255) [not null, unique]
  household_id integer [ref: > household.id, note: "Many-to-One: Each chore belongs to one household"]
  description varchar(255) [not null]
  active bool [default: false]
  frequency_days integer [not null, note: "Frequency of the chore in days (e.g. every 7 days)"]
  archived bool [not null, default: false]
  voice_recording bytea [note: "Binary data to store the actual file"]
  image bytea [note: "Binary data to store the actual file"]
  weight integer [not null, note: "Weight of the chore (1-10). Constraint: weight should be between 1 and 10"]
}

Table app_user {
  id serial [primary key]
  name varchar(255) [not null]
  account_id integer [not null, ref: > account.id, note: "Many-to-One: Each user can have one account"]
}

Table avatar {
  id serial [primary key]
  name varchar(255) [not null]
  image bytea [not null, note: "Binary data to store the actual file"]
  colour_code varchar(7) [not null, note: "Represents colour codes like #FF5733"]
}

Table chore_status {
  id serial [primary key]
  completed bool [not null, default: false, note: "Indicates if the chore is completed"] 
  due_date date [note: "The date the chore is due"]
  done_date date [note: "The date the chore was completed"]
}

Table account {
  id serial [primary key]
  user_name varchar(255) [not null]
  hashed_password varchar(255) [not null]
}

Table role {
  id serial [primary key]
  name varchar(50) [not null, unique, note: "Defines the role name (e.g., admin, user)"]
}

Table chore_to_user_to_chore_status {
  user_id integer [not null, ref: > app_user.id, note: "Many-to-Many: Links to User table (user assigned to a chore)"]
  chore_id integer [not null, ref: > chore.id, note: "Many-to-Many: Links to Chore table (tracks which chore). Cascade delete on chore_id when chore is deleted to maintain referential integrity"]
  status_id integer [not null, ref: > chore_status.id, note: "Many-to-Many: Links to ChoreStatus (tracks chore's status)"]
}

Table user_to_household {
  user_id integer [not null, ref: > app_user.id, note: "Many-to-Many: Links a user to a household they belong to"]
  household_id integer [not null, ref: > household.id, note: "Many-to-Many: Links a household to users that belong to it"]
  role_id integer [not null, ref: > role.id, note: "Defines the role of the user within the household (e.g., admin or user)"]
}

Table user_to_avatar {
  user_id integer [not null, ref: > app_user.id, note: "Many-to-Many: Links a user to an avatar"]
  avatar_id integer [not null, ref: > avatar.id, note: "Many-to-Many: Links an avatar to users"]
}

/*
CREATE TABLE household (
    id SERIAL PRIMARY KEY, 
    name VARCHAR(255) NOT NULL UNIQUE,
    code INTEGER NOT NULL UNIQUE
    -- code VARCHAR(4) NOT NULL UNIQUE -- so we can have 0000-9999. Consider indexing to speed up queries
);

CREATE TABLE chore (
    id SERIAL PRIMARY KEY, 
    name VARCHAR(255) NOT NULL UNIQUE,
    household_id INTEGER REFERENCES household(id), -- Many-to-One: Each chore belongs to one household
    description VARCHAR(255) NOT NULL,
    active BOOLEAN DEFAULT FALSE,
    frequency_days INTEGER NOT NULL, -- Frequency of the chore in days (e.g. every 7 days)
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    voice_recording BYTEA, -- Binary data to store the actual file
    image BYTEA, -- Binary data to store the actual file
    weight INTEGER NOT NULL CHECK (weight BETWEEN 1 AND 10) -- Weight of the chore (1-10). Constraint: weight should be between 1 and 10
);

CREATE TABLE app_user (
    id SERIAL PRIMARY KEY, 
    name VARCHAR(255) NOT NULL,
    avatar_id INTEGER NOT NULL REFERENCES avatar(id), -- Many-to-One: Each user can have one avatar
    account_id INTEGER NOT NULL REFERENCES account(id) -- Many-to-One: Each user can have one account
);

CREATE TABLE avatar (
    id SERIAL PRIMARY KEY, 
    name VARCHAR(255) NOT NULL,
    image BYTEA NOT NULL, -- Binary data to store the actual file
    colour_code VARCHAR(7) NOT NULL -- Represents colour codes like #FF5733
);

CREATE TABLE chore_status (
    id SERIAL PRIMARY KEY, 
    completed BOOLEAN NOT NULL DEFAULT FALSE, -- Indicates if the chore is completed
    due_date DATE, -- The date the chore is due
    done_date DATE -- The date the chore was completed
);

CREATE TABLE account (
    id SERIAL PRIMARY KEY, 
    user_name VARCHAR(255) NOT NULL,
    hashed_password VARCHAR(255) NOT NULL
);

CREATE TABLE role (
    id SERIAL PRIMARY KEY, 
    name VARCHAR(50) NOT NULL UNIQUE -- Defines the role name (e.g., admin, user)
);

CREATE TABLE chore_to_user_to_chore_status (
    user_id INTEGER NOT NULL REFERENCES app_user(id), -- Many-to-Many: Links to User table (user assigned to a chore)
    chore_id INTEGER NOT NULL REFERENCES chore(id) ON DELETE CASCADE, -- Many-to-Many: Links to Chore table (tracks which chore). Cascade delete on chore_id when chore is deleted to maintain referential integrity
    status_id INTEGER NOT NULL REFERENCES chore_status(id) -- Many-to-Many: Links to ChoreStatus (tracks chore's status)
);

CREATE TABLE user_to_household (
    user_id INTEGER NOT NULL REFERENCES app_user(id), -- Many-to-Many: Links a user to a household they belong to
    household_id INTEGER NOT NULL REFERENCES household(id), -- Many-to-Many: Links a household to users that belong to it
    role_id INTEGER NOT NULL REFERENCES role(id), -- Defines the role of the user within the household (e.g., admin or user)
    PRIMARY KEY (user_id, household_id) -- Composite primary key to ensure uniqueness of the user-household relationship
);

CREATE TABLE user_to_avatar (
    user_id INTEGER NOT NULL REFERENCES app_user(id), -- Many-to-Many: Links a user to an avatar
    avatar_id INTEGER NOT NULL REFERENCES avatar(id), -- Many-to-Many: Links an avatar to users
    PRIMARY KEY (user_id, avatar_id) -- Composite primary key to ensure an avatar can only be assigned to one user in each household
);
*/