// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project project_name {
  database_type: 'SQL'
  Note: 'HushÃ¥llet'
}

Table household {
  id integer [primary key]
  name varchar(255) [not null, unique, note: "Unique name for the household"]
  code varchar(4) [not null, unique, note: "Unique code for the household "] // so we can have 0000-ZZZZ. Consider indexing to speed up queries
}

Table chore {
  id integer [primary key]
  name varchar(255) [not null, unique]
  household_id integer [ref: > household.id, note: "Many-to-One: Each chore belongs to one household"]
  description varchar(255) [not null]
  active bool [default: true]
  frequency_days integer [not null, note: "Frequency of the chore in days (e.g. every 7 days)"]
  archived bool [not null, default: false]
  voice_recording blob [note: "Binary data to store the actual file"]
  image blob [note: "Binary data to store the actual file"]
  weight integer [not null, note: "Weight of the chore (1-10). Constraint: weight should be between 1 and 10"]
}

Table user {
  id integer [primary key]
  name varchar(255) [not null]
  account_id integer [not null, ref: > account.id, note: "Many-to-One: Each user can have one account"]
}

Table avatar {
  id integer [primary key]
  name varchar(255) [not null]
  image blob [not null, note: "Binary data to store the actual file"]
  colour_code varchar(7) [not null, note: "Represents colour codes like #FF5733"]
}

Table chore_status {
  id integer [primary key]
  completed bool [not null, default: false, note: "Indicates if the chore is completed"] 
  due_date date [note: "The date the chore is due"]
  done_date date [note: "The date the chore was completed"]
}

Table account {
  id integer [primary key]
  user_name varchar(255) [not null]
  hashed_password varchar(255) [not null]
}

Table role {
  id integer [primary key]
  name varchar(50) [not null, unique, note: "Defines the role name (e.g., admin, user)"]
}

Table chore_to_user_to_chore_status {
  user_id integer [not null, ref: > user.id, note: "Many-to-Many: Links to User table (user assigned to a chore)"]
  chore_id integer [not null, ref: > chore.id, note: "Many-to-Many: Links to Chore table (tracks which chore). Cascade delete on chore_id when chore is deleted to maintain referential integrity"]
  status_id integer [not null, ref: > chore_status.id, note: "Many-to-Many: Links to ChoreStatus (tracks chore's status)"]
}

Table user_to_household {
  user_id integer [not null, ref: > user.id, note: "Many-to-Many: Links a user to a household they belong to"]
  household_id integer [not null, ref: > household.id, note: "Many-to-Many: Links a household to users that belong to it"]
  role_id integer [not null, ref: > role.id, note: "Defines the role of the user within the household (e.g., admin or user)"]
}

Table user_to_avatar {
  user_id integer [not null, ref: > user.id, note: "Many-to-Many: Links a user to an avatar"]
  avatar_id integer [not null, ref: > avatar.id, note: "Many-to-Many: Links an avatar to users"]
}